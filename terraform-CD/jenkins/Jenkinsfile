pipeline {
  agent { node { label 'terraform-runner' } }

  environment {
    GITHUB_REPOSITORY = "LeajD/AWS-Projects"  
    GITHUB_CREDENTIALS      = "win-ssh"
    GITHUB_TOKEN = credentials('github_token')
  }
  
  stages {
    stage('Checkout') {
      //when { branch 'ci-apply*' }
      steps {
        git url: "git@github.com:${env.GITHUB_REPOSITORY}.git", branch: "${env.BRANCH_NAME}",  credentialsId: "${env.GITHUB_CREDENTIALS}"
      }
    }

    
    stage('Terraform Apply (Merge)') {
      // When not a pull request build (merged branch)
    when { expression { env.CHANGE_ID == null && env.BRANCH_NAME == "main" } }
      steps {
        echo "Merged PR. Running Terraform apply..."
        sh 'python3 terraform-CD/jenkins/python-terraform.py apply'
      }
      post {
        always {
          archiveArtifacts artifacts: 'terraform_apply_output.txt', allowEmptyArchive: true
          archiveArtifacts artifacts: 'terraform_plan.log', allowEmptyArchive: true
        }
      }

    }
  }
  
  post {
    failure {
      echo "Build failed!"
    }
    success {
      echo "Build succeeded!"
    }
  }
}