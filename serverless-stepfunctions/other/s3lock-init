#first create s3 bucket:
#aws s3api create-bucket   --bucket serverlessproject-tfstate  --region us-east-1 
#aws s3api put-bucket-versioning   --bucket serverlessproject-tfstate   --versioning-configuration Status=Enabled
#aws s3api put-bucket-encryption  --bucket serverlessproject-tfstate   --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
#aws s3api put-public-access-block   --bucket serverlessproject-tfstate   --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
#aws cloudtrail create-trail   --name my-cloudtrail   --s3-bucket-name my-log-bucket \  --cloud-watch-logs-log-group-arn arn:aws:logs:us-east-1:YOUR_ACCOUNT_ID:log-group:my-log-group \  --cloud-watch-logs-role-arn arn:aws:iam::YOUR_ACCOUNT_ID:role/CloudTrail_CloudWatchLogs_Role

#create dynamodb (without it terraform apply won't work bcs it cannot create lock file to create dynamodb itself)
#aws dynamodb create-table --table-name tf-state-file-lock --attribute-definitions AttributeName=LockID,AttributeType=S --key-schema AttributeName=LockID,KeyType=HASH --billing-mode PAY_PER_REQUEST --tags Key=env,Value=dev

# DynamoDB table for state locking
#resource "aws_dynamodb_table" "tf_lock" {
#  name         = var.dynamodb_lock_table
#  billing_mode = "PAY_PER_REQUEST"
#  hash_key     = "LockID"#
#  attribute {
#    name = "LockID"
#    type = "S"
#  }
#  tags = {
#    Name        = "${var.s3_tfstate_bucket}"
#    Environment = var.environment
#  }
#}